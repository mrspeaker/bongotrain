* blerg
hacking away at a wr.


* Mame debugging

./mame bongo -autoboot_script scripts/bongo.lua

start: mame -debug
debug -> new memory window
drop down device dropdown, look for the "zero page" (seems to be 8000-83fff for bongo)
find the cheat (I just eyeballed it... cheat didn't seem to work?) - lives at 32 (actually 8032!)
set it with: `do b@8032 = 10`... boom, 10 lives.
look for write: wpset 8032,1,w
wpset 8042,1,w,,{ printf "w@%04X : %02X",wpaddr,wpdata ; g }
0247 ld (hl),a ... one opcode! 77. How to nop it out?

video ram:
0x3a0 = top left corner
0x3bf = bottom left corner - 0xF = bottom, second column

330 = copywrite symbol on splash

function printt(t)
   for i,j in pairs(t) do
      print(i,j)
   end
end

printt(manager.machine.devices[":maincpu"].items)

cpu = manager.machine.devices[":maincpu"]
mem = cpu.spaces["program"]
--vid = cpu.items["0/:videoram"]

cheatinit
cheatnext +
cheatnext -
 (eq, ne, https://docs.mamedev.org/debugger/cheats.html)
 cheatlist
cheatnextf (search compared to start)
cheatundo 

 8002: copy of player ypos?
 8004: use screen num, or screen num + 1 ? scratch location?
 8005: fire button held down.
 800b: controls: jump/left/right: 00J0 LR00
 800e: copy of 800b? "normalized"
 800f: jump acceleration
 8014/15/16(lo): score in bcd
 8017/18/19: p2 score
 801d: score to add
 8020/21: something to do with room layout
 8024: bongo/troll jump timer...
 8029: Current screen
 8032: Lives
 8034: attract mode? 0 true, 1 false?
 8036: rock reset counter
 8037: rock 1 Y pos.
 8039: bird flying enabled? (switch to 0 and it stops)
 8140: x pos head
 8141: sprite head
 8143: y pos
 8147: y pos legs
 8148: troll x pos
 814d: dino head sprite
 8303; # credits
 83f1: player 1/2 button (low byte) : 1 = p1 , 2 = p2

 $934B - bonus covering the number


 ; bonus is capped to 40000 
 29E8: 3A 62 80    ld   a,($BONUS_MULT)
29EB: 3C          inc  a
29EC: FE 04       cp   $04
29EE: 20 02       jr   nz,$29F2
29F0: 3E 03       ld   a,$03
29F2: 32 62 80    ld   ($BONUS_MULT),a
29F5: AF          xor  a
29F6: 32 60 80    ld   ($BONUSES),a

* TG

https://www.twingalaxies.com/wiki_index.php?title=Policy:Official-MAME-Platform-Submission-Rules-and-Guidelines

- frameskip set to 0 and "draw all frames"
- must show dip settings before and after.

  - aspect ration is 224x768 - but this is some internal ratio (from Galaxian).
    to get it to save at native:
 mame bongo -snapsize 224x256
 - f12 snapshot.
   shft-f12 record mni?
   ctrl-shift-f12 record avi
   records to /snap

 record inp file:
 mame bongo -record bongorecord
 records to /inp
playback inp:
mame bongo -playback bongorecor
 
Â 
-nvram_directory NUL

 You can use -wavwrite to record audio in WAV format.

You can use -mngwrite to record video in MNG format.

You can use -aviwrite to record audio and video in uncompressed AVI format. 


-iv 1 on playback lets you "Del" to see dips and speed up playback?


0.263W (mame0263-706-g35e85bbfe63)%


----------
Submitters should use MAME version 183 or higher, preferably 183 or 220.

Submitters should name their inp and zip file in the following manner:

xxx_yyy_score_zzz

Example:

elf_bosco_588800_w183.inp inp
elf_bosco_588800_w183 zip file
so name the inp the same as the zip

xxx your initials
yyy rom name
zzz version of wolfmame
_separator 

-----------

Well, I spent a bunch of time on the weekend reverse engineering bongo source code. (I reckon I'd be world champion now if I had have just played the game!) 
https://github.com/mrspeaker/bongotrain/blob/main/bongo.asm
 
I'm going through and commenting the source, and replacing memory addresses with labels. Haven't found too much interesting stuff yet, but a couple of things:
 
Pickup tile collision: has to be 4 pixels from the left of the player and 24px down to trigger collision. That's why it's so hard to pick up the bonus when it's on a ledge.
 
Also, bonuses are capped at 40k for sure.
 
Here's the pickup lookup table for each screen (up to 3 pickups per screen maximum): so, easy to modify for a level editor.

--- TIME SPEED RUN
And I found this funny thing: there was meant to be a timer that showed under the score - but it was removed by returning from the draw function. Damn it, we could have had speed-runner mode too! In my improved lua script, I removed the return instruction so now it draws the time:

Looks like it was half-baked: on transition, flashes white for a couple of frames. Disappears on the end screen (where you'd want to compare it to other runs), and doesn't show at all on the hiscore entry or display.

----

I also figured out you get more points if you jump off a ledge before the end of a screen. Like, if you walk off the end of screen 1, you get 2090 points, but if you jump off the ledge you get 2210 points. I was always jumping just to show-boat, but turns out it's optimal strategy

Yeah, I watched BAZZA (BARRA? BAGGA?)'s run - they jump EVERY screen end (but it's not necessary unless there's an ledge... pffft, amateur)
---
Mini-tip: in the "jump up the stairs" level - you know it's hard to get the crown (you have to carefully tap until you get it)? Now I just go to the next stair up, and then drop back down. Bit less stressfull, and even works when the blue meanie guy is there.

I played about 4 times around - it looks like it's "impossible" on about the 4th time where there is the "1 bird left/2 birds right" level. You can't wait for the bird, because the dino is too quick. It might be possible to be frame-perfect and jump between the two birds... but damn, I couldn't do it.

The only thing that seems to change is how long the dino takes to start

It does change things though - some levels you just have to go... like the blue meanies - you need to jump over the first one! That's why you can sit next to him.

Can jump from one-step-higher in second round

-----
    ;; Oooh, mystery function - commented out.
    ;; Think it was going to place Bongo on the
    ;; bottom right for levels where player is
    ;; up top.
MOVE_BONGO_REDACTED
0D40: C9          ret           ; just rets.
0D41: 3A 48 81    ld   a,($BONGO_X)
0D44: 67          ld   h,a
0D45: 32 4B 81    ld   ($BONGO_Y),a
0D48: C6 10       add  a,$10


---
UPDATE_FALLING_ROCKS
1680: 3A 04 80    ld   a,($PLAYER_NUM)

round 1 vs round 2+

----
HOw the speeds work:

SPEED_UP_FOR_NEXT_ROUND
4EE0: 3A 04 80    ld   a,($PLAYER_NUM)
4EE3: A7          and  a
4EE4: 20 05       jr   nz,$4EEB
4EE6: 21 5B 80    ld   hl,$SPEED_DELAY_P1
4EE9: 18 03       jr   $4EEE
4EEB: 21 5C 80    ld   hl,$SPEED_DELAY_P2
4EEE: 7E          ld   a,(hl)
4EEF: FE 1F       cp   $ROUND1_SPEED
4EF1: 20 03       jr   nz,$4EF6
4EF3: 36 10       ld   (hl),$ROUND2_SPEED ; round 2 = $10
4EF5: C9          ret
4EF6: FE 10       cp   $ROUND2_SPEED
4EF8: 20 03       jr   nz,$4EFD
4EFA: 36 0D       ld   (hl),$ROUND3_SPEED ; round 3 = $0d
4EFC: C9          ret
4EFD: C3 1C 50    jp   $501C    ; round 4+ = get 2 faster each time!
501C: 3D          dec  a
501D: 3D          dec  a
501E: 77          ld   (hl),a

----------

cool to see them tinkering with game design stuff

    ;; ANOTHER commented out one!
    ;; This stops a player jumping up through a platform
    ;; from underneath it. Probably more realistic, but
    ;; smart move on the devs part to remove it it - it sucks!
PREVENT_CLOUD_JUMP_REDACTED
1290: C9          ret
1291: 3A 47 81    ld   a,($PLAYER_Y_LEGS)

----


mini "bug" 8011 "falling timer' continues over to next screen - but you're on the ground, so next frame it resets. But, I reckon if you could time your fall so you got out of the screen when teh timer was 1, you'd die on the first frame of the next screen...

* mame bongo
inputs:
https://github.com/mamedev/mame/blob/85a3c394d20e82da9e1dd6f40d2be6ac2ac3cece/src/mame/galaxian/galaxian.cpp#L4663

	map(0xa000, 0xa000).mirror(0x07ff).portr("IN0");
	map(0xa800, 0xa800).mirror(0x07ff).portr("IN1");
	map(0xb000, 0xb000).mirror(0x07ff).portr("IN2");

    map(0x0000, 0x3fff).rom();
	map(0x8000, 0x83ff).mirror(0x0400).ram();
	map(0x9000, 0x93ff).mirror(0x0400).ram().w(FUNC(galaxian_state::galaxian_videoram_w)).share("videoram");
	map(0x9800, 0x98ff).mirror(0x0700).ram().w(FUNC(galaxian_state::galaxian_objram_w)).share("spriteram");
	map(0xa000, 0xa000).mirror(0x07ff).portr("IN0");
	map(0xa800, 0xa800).mirror(0x07ff).portr("IN1");
	map(0xb000, 0xb000).mirror(0x07ff).portr("IN2");
	map(0xb000, 0xb000).mirror(0x07f8).w(FUNC(galaxian_state::irq_enable_w));
	map(0xb004, 0xb004).mirror(0x07f8).w(FUNC(galaxian_state::galaxian_stars_enable_w));
	map(0xb006, 0xb006).mirror(0x07f8).w(FUNC(galaxian_state::galaxian_flip_screen_x_w));
	map(0xb007, 0xb007).mirror(0x07f8).w(FUNC(galaxian_state::galaxian_flip_screen_y_w));
	map(0xb800, 0xb800).mirror(0x07ff).r("watchdog", FUNC(watchdog_timer_device::reset_r));

    -- overritten by bongo:
    map(0x0000, 0x5fff).rom().region("maincpu", 0); // extend ROM
	map(0xb000, 0xb000).mirror(0x7f8).nopw(); // interrupt enable moved
	map(0xb001, 0xb001).mirror(0x7f8).w(FUNC(galaxian_state::irq_enable_w));
	map(0xb800, 0xb800).mirror(0x7ff).nopw(); // written once at start


    ----

    Secret track? No! I think it's in there.... best track though
    
    woah, secret track: 0x0b sfx (set 0x8042/3/4...) wow. crazy.
    0x10 is hilarious... but think it's just playing game code as sfx.

    ---

    Interesting AABB algo

   1. subs positions and widht, checks carry.
    2. if no hit -might be to the left so ADDS double width... if carry, hit on other side

    > enemy x = 0, player x = 12 = NO HIT
    > enemy x = 12, player x = 0 = YEP HIT!

  #+BEGIN_SRC
        00 (eX)        00            x88
    .-  12 (pX)    .-   8          - x94
     = -12          = - 8          -  6
    .-  12 (w/2)   .-  12          - xa
     = -24          = -20          - 22
     C?  N          C?  N          N
    .+  24 (w*2)   .+  24          + 33
     =   0          =   4          = 11
     C?  N              Y          = Y
    
    
  #+END_SRC

  for dino, much bigger collision area:
  x: sub $18, add $30
  y: sub $28, add $50
    
--------------
level design

actually pretty good!
intro the level, no danger - just jump,
enxt is exactly the same, but with one rock,
then new level, etc
A 7 "types" of level - progressively more difficult
intro S quite late - very exciting
awesome cut scene... but weirdly, no bonus.
---
33 pickups: 5 full sets of bonuses, max bonus = 10 + 20 + 30 + 40 + 40 = 140k
~60k for screens, + 140k for bonus  = ~200k max for one round.

----

7 types of level
#+BEGIN_SRC

_m_,  _-`-_, _/`,`w`, `\_, _S`, _â¡ â¡`, _S-

n_n, nTn, /,W, \, S, S_S,
n_n, nTn, /,^^,\, S, Sc

01: n_n  | crown right
02: n_n  rock right | cross right
03: nTn  | cross right
04: n_n  bird bottom, rock right | crown right
05: /    | crown center
06: W    | crown center
(bonuses: 6)
07: \    | cross center
08: n_n  bird bottom, rock left, rock right | cross right
09: nTn  rock right | cross right
10: /    bluey center | crown center
11: W    bird top, | crown center, ring right
(bonuses: 6)
12: \    blue center, blue center | cross center
13: n_n  bird bottom, rock left, rock right | crown right (same pattern as 8)
14: nTn  rock left, rock right | ring left, cross right
15: n_n  ltr bird bottom, bird right | cross right
16: S    | ring bottom center, vase top left
(bonuses: 7)
17: \    ltr bird center, bluey center, bluey center | cross center
18: n_n  ltr bird bottom, bird bottom, rock right | cross right
19: S    arrow center, arrow top | ring bottom, vase top right
20: \     arrow center, arrow top, bluey center | cross center
21: S_S  | crown bottom, ... cross center, vase top
(bonuses: 8)
22: W    bird top, ltr bird top | crown center, ring right
23: \    bird bottom, ltr bird center, bluey center | cross center
24: S_S  flame (x3) center | crown bottom, cross center, vase top
(bonuses: 6)
25: W    bird top, ltr bird top, ltr bird top | crown center, ring right
26: \    arrow top, arrow center, arrow bottom | cross center
27: S    bird top, ltr bird top, ltr bird top
(bonuses: 6)
#+END_SRC

level 8 and 13 are the same level (different pickup!)

ledge on blue meaninies - important later

levels lead up and down consistently: pro tip, careful getting bonuses at the bottom - forget to look up at the birds on the next level.

No bonus for catching dino. how cool is that? Also, dino screen is lowest point scoring: no bonuses to pickup, can't get full move bonus

----
3s and 6s... plus offset by 1
inc
inc
inc
---
pro tips:

Safety stair pickup (e)
Fast rock leap (t)
Jump from ledge will get more bonus... not flat ground
Can wait on platform to get more points if will skip above
Can jump over bonus, go to end, come back for more points (if skip)
collision is left 12px - can overlap birds heading at you
bonus resets on round change - don't sweat end-level deaths
favour speed-run over careful: doesn't work in round 2
fast round - can jump from second-to-bottom stair

---
- what's that weird tiny "slowdown" right at the start? Lags for a split second
- maybe the "impossible 3 bird" run : might be beatable if you time it so the first pickup is your bonus, and skip the screen
  
---
trav bug: die on screen one/two
always 1/2 - some others, but can't do it consistently

Never called after transition (until death):

_ON_GROUND
09F7: AF          xor  a        ; reset
09F8: 32 11 80    ld   ($FALLING_TIMER),a

wp 800F,1,w,,{ printf "Read @ %08X\n",wpaddr ; g }
wpset 800F,1,w,,{ printf "w@%04X : %02X",wpaddr,wpdata ; g }

Frame:
07->0 into next frame
00
07->0 jump ok

07->0 into next frame
00
07->4 ded ?

---
Weird sequencing of frames and timer. Is one on interrupt?

w@8011 : 00
w@8011 : 00
w@800F : 07 <- jump
w@800F : 06
w@800F : 05
w@800F : 04
w@800F : 03
w@800F : 02
w@800F : 01
w@800F : 00
w@8011 : 10 <- fall timer set (in second screen?)
w@800F : 00
w@800F : 07
w@8011 : 0F
w@8011 : 0E
w@800F : 06
w@8011 : 0D
w@8011 : 0C
w@8011 : 0B
w@8011 : 0A
w@8011 : 09
w@8011 : 08
w@800F : 05
w@8011 : 07
w@8011 : 06
w@8011 : 05
w@8011 : 04
w@8011 : 03
w@8011 : 02
w@800F : 04
w@8011 : 01
w@8011 : 00 <- fall timer expire (0xa40). ded.
Stopped at breakpoint 1

reads "jump up" phys ($960)



 PLAYER_Y
w@8143 : B8 <- on platform sc1
w@8143 : AC <- jump
w@8143 : A0
w@8143 : 9A
w@8143 : 9A
w@8143 : A0
w@8143 : AC
w@8143 : B8 <- 7 ticks
w@8143 : D0 <- ground level
w@8143 : 00 <- reset
w@8143 : D0 
w@8143 : D2 <- into ground (normal, but why? SNAP_Y_TO_8 should fix it?)
w@8143 : D4 <- +2? things go bad here. Should be D0 again
w@8143 : C8 <- jumping (jumps 0C, but should be C4 here)
w@8143 : CA ; +2?
w@8143 : CC ; +2?
w@8143 : CE ; +2?
w@8143 : D0 <- snap back to ground
w@8143 : D2 <- into ground
w@8143 : D4
w@8143 : C8  <- jumps up 0C
w@8143 : CA ; +2
w@8143 : CC
w@8143 : CE 
w@8143 : D0 <- snap back to ground
w@8143 : D2 <- into ground
w@8143 : D4
w@8143 : CE <- jumping
w@8143 : D0 <- snap back to ground
w@8143 : D3 <- odd number! (into ground)
w@8143 : D6
w@8143 : D9
w@8143 : E9 <- ded (by timer)
User-initiated break



non dead one (holding jump):
w@8143 : B8 <- platform sc2
w@8143 : AC <- jump
w@8143 : A0
w@8143 : 9A
w@8143 : 9A
w@8143 : A0
w@8143 : AC
w@8143 : B8 <- 7 ticks
w@8143 : D0 <- reset to ground
w@8143 : 00 <- screen transition
w@8143 : D0 
w@8143 : D2 <- in ground
w@8143 : D0
w@8143 : C4 <- normal jump (D0-C4=0C: first entry in phys table)
w@8143 : B8
w@8143 : B2
w@8143 : B2
w@8143 : B8
w@8143 : C4
w@8143 : D0
w@8143 : D0




normal one (not holiding jump)
w@8143 : B8 <- on platform scr1
w@8143 : AC <- jump
w@8143 : A0
w@8143 : 9A
w@8143 : 9A
w@8143 : A0
w@8143 : AC
w@8143 : B8 <- 7 ticks
w@8143 : D0 <- ground
w@8143 : 00
w@8143 : D0
w@8143 : D2 <- into ground (ok)
w@8143 : D0 <- back to ground
w@8143 : D0

---


8143 = player Y
800f = jump table index
8011 = falling timer

Fail to die (held jump, but didn't glitch)
w@8143 : B8 <- platform scr 1
w@800F : 07 <- jump
w@800F : 06
w@8143 : AC
w@800F : 05
w@8143 : A0
w@800F : 04
w@8143 : 9A
w@800F : 03
w@8143 : 9A
w@800F : 02
w@8143 : A0
w@800F : 01
w@8143 : AC
w@800F : 00
w@8143 : B8 <- back to init Y
w@8011 : 10 <- fall timer set
w@8143 : D0 <- Y to new ground
w@8143 : 00 <- screen reset
w@8143 : D0 <- y pos ground
w@800F : 00 <- jump idx is 0
; no jump triggered in this "good" version
w@8011 : 0F <- fall timer - 1
w@8143 : D2
w@8011 : 00 <- reset fall timer 
w@8143 : D0
w@8011 : 00 <- reset fall timer 
w@8143 : D0
w@800F : 07 <- Jump triggered
w@800F : 06 <- phys
w@8143 : C4
w@800F : 05 <- phys
w@8143 : B8
w@800F : 04 <- phys
w@8143 : B2
w@800F : 03 <- phys
w@800F : 04 <- phys what?!
w@8143 : B2
w@800F : 03 <- phys
w@8143 : B2
w@800F : 02 <- phys
w@8143 : B8
w@800F : 01 <- phys
w@8143 : C4
w@800F : 00<- phys done
w@8143 : D0
w@8011 : 00 <- reset fall timer


---
ok, looks like bug is jump triggerered whne 8011 fall timer is not 0

and ded
w@8143 : B8 <- platform scr 1
w@800F : 07 <- jump
w@800F : 06
w@8143 : AC
w@800F : 05
w@8143 : A0
w@800F : 04
w@8143 : 9A
w@800F : 03
w@8143 : 9A
w@800F : 02
w@8143 : A0
w@800F : 01
w@8143 : AC
w@800F : 00
w@8143 : B8 <- back to init Y
w@8011 : 10 <- fall timer set
w@8143 : D0 <- Y to new ground
w@8143 : 00 <- screen reset
w@8143 : D0 <- Y pos gound
w@800F : 00
w@800F : 07 <- JUMP TRIGGERED!
w@8011 : 0F <- fall timer - 1
w@8143 : D2
w@8011 : 0E <- oh noes, not reset - because (jump_idx & 0xc) > 0
w@8143 : D4 <- +2 from JUMP_UPWARD_CHECK_BIG_FALL
w@800F : 06
w@8143 : C8 <- now some phys, -12 (0xf4) from table idx 6
w@8011 : 0D
w@8143 : CA <- but oh, +2 again
w@8011 : 0C
w@8143 : CC <- +2
w@8011 : 0B
w@8143 : CE <- +2
w@8011 : 0A
w@8143 : D0 <- +2
w@8011 : 09
w@8143 : D2 <- +2
w@8011 : 08
w@8143 : D4 <- +2
w@800F : 05 <- phys tick
w@8143 : C8 <- -12 (0xf4) from table idx 5
w@8011 : 07
w@8143 : CA
w@8011 : 06
w@8143 : CC
w@8011 : 05
w@8143 : CE
w@8011 : 04
w@8143 : D0
w@8011 : 03
w@8143 : D2
w@8011 : 02
w@8143 : D4
w@800F : 04 <- phys tick
w@8143 : CE <- -6 (0xfa) from table idx 4
w@8011 : 01
w@8143 : D0
w@8011 : 00
w@8143 : D3
w@8143 : D6
w@8143 : D9
w@8143 : E9
User-initiated break


--- theories
Bug seems to be that falling_timer is not reset on screen transition.
But to be an issue, a JUMP_TRIGGERED has to happen before GROUND_CHECK clears the falling_timer.

Maybe NMI sets CONTROLN slightly earlier on level 2 for some reason? Then jump is set BEFORE check ground... otherwise check ground resets the falling_timer before jump sets jump_tbl_idx/

Or, if not NMI issue: it's DO_JUMP_PHYSICS: only runs once every 6 frames (in round 1, then 4 after that)... this triggers jump. Seems right, 1-in-6 chance to trigger: Buuut, why does it run EVERY TIME in screen 2?

Why the inconsistency? Always triggers on level 1->2, but more random on other screens. Should be random everywhere?


* lore
   ;; - We decided "Bongo" is actually name of the lil' jumpy
    ;;   guy in the corner of the screen, not the player.
    ;;   He's complicated: celebrates the player's death,
    ;;   but also parties with player on dino capture.

    what are those lil' bongolians at the dance party?

    is the player Australian? Spanish? Wearing high-heels? Indiana Jones (Raiders was 1981).
    Bongo is ewok-ish - RotJ was also 1983... could they have known about ewoks?
