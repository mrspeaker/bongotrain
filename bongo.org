* Bongo
Welcom to bongo.

* blerg
hacking away at a video game wr.
aka: the earl of bongo

at the office there is an arcade machine. It's one of those xxxx-in-one machines that has thousands of old games on it. Most of the games are bad, but if you hunt around you can find games on it that are /really/ bad. If a game is both bad /and/ good enough, it makes it to  our offce's treasured "shit-game olympics" list.

A few months ago ... An excite slack notifciation notified me "check out the new game".  a game called Bongo made the list, and started me on a journey: a journey ... hacking, trainign montges, , world record

----
- while making a patch in the rom, missed a RET and the screen went to Galaxian startfiled scroll! What? rabbit hole of hacked ROM releases
  
- not really into games... never finish them. like making and hacking - so what if did both at the same time?!
- improve knowldeeg of code = better scores.
- holy crap, think they hand-rolled this! I was doing everyting with text eeditor to disassemble... they were doing it too!
  - couple of "middle of instruction" jumps - that luckily don't crash things. (HISCORE_ENTER_TIMER, and DRAW_BUGGY_BORDER). buggy border is a single bit (4 vs 5), but hiscore is 2 bits - (7 vs 4) - so probably not import error.

- looking for jetsoft.
  ... some code hadweird bugs... needed to know more about the design process.

* Mame debugging

./mame bongo -autoboot_script scripts/bongo.lua

start: mame -debug
debug -> new memory window
drop down device dropdown, look for the "zero page" (seems to be 8000-83fff for bongo)
find the cheat (I just eyeballed it... cheat didn't seem to work?) - lives at 32 (actually 8032!)
set it with: `do b@8032 = 10`... boom, 10 lives.
look for write: wpset 8032,1,w
wpset 8042,1,w,,{ printf "w@%04X : %02X",wpaddr,wpdata ; g }
0247 ld (hl),a ... one opcode! 77. How to nop it out?

video ram:
0x3a0 = top left corner
0x3bf = bottom left corner - 0xF = bottom, second column

330 = copywrite symbol on splash

function printt(t)
   for i,j in pairs(t) do
      print(i,j)
   end
end

printt(manager.machine.devices[":maincpu"].items)

cpu = manager.machine.devices[":maincpu"]
mem = cpu.spaces["program"]
--vid = cpu.items["0/:videoram"]

cheatinit
cheatnext +
cheatnext -
 (eq, ne, https://docs.mamedev.org/debugger/cheats.html)
 cheatlist
cheatnextf (search compared to start)
cheatundo 

 8002: copy of player ypos?
 8004: use screen num, or screen num + 1 ? scratch location?
 8005: fire button held down.
 800b: controls: jump/left/right: 00J0 LR00
 800e: copy of 800b? "normalized"
 800f: jump acceleration
 8014/15/16(lo): score in bcd
 8017/18/19: p2 score
 801d: score to add
 8020/21: something to do with room layout
 8024: bongo/troll jump timer...
 8029: Current screen
 8032: Lives
 8034: attract mode? 0 true, 1 false?
 8036: rock reset counter
 8037: rock 1 Y pos.
 8039: bird flying enabled? (switch to 0 and it stops)
 8140: x pos head
 8141: sprite head
 8143: y pos
 8147: y pos legs
 8148: troll x pos
 814d: dino head sprite
 8303; # credits
 83f1: player 1/2 button (low byte) : 1 = p1 , 2 = p2

 $934B - bonus covering the number


 ; bonus is capped to 40000 
 29E8: 3A 62 80    ld   a,($BONUS_MULT)
29EB: 3C          inc  a
29EC: FE 04       cp   $04
29EE: 20 02       jr   nz,$29F2
29F0: 3E 03       ld   a,$03
29F2: 32 62 80    ld   ($BONUS_MULT),a
29F5: AF          xor  a
29F6: 32 60 80    ld   ($BONUSES),a

* mame bongo
** hardware
inputs:
https://github.com/mamedev/mame/blob/85a3c394d20e82da9e1dd6f40d2be6ac2ac3cece/src/mame/galaxian/galaxian.cpp#L4663

	map(0xa000, 0xa000).mirror(0x07ff).portr("IN0");
	map(0xa800, 0xa800).mirror(0x07ff).portr("IN1");
	map(0xb000, 0xb000).mirror(0x07ff).portr("IN2");

    map(0x0000, 0x3fff).rom();
	map(0x8000, 0x83ff).mirror(0x0400).ram();
	map(0x9000, 0x93ff).mirror(0x0400).ram().w(FUNC(galaxian_state::galaxian_videoram_w)).share("videoram");
	map(0x9800, 0x98ff).mirror(0x0700).ram().w(FUNC(galaxian_state::galaxian_objram_w)).share("spriteram");
	map(0xa000, 0xa000).mirror(0x07ff).portr("IN0");
	map(0xa800, 0xa800).mirror(0x07ff).portr("IN1");
	map(0xb000, 0xb000).mirror(0x07ff).portr("IN2");
	map(0xb000, 0xb000).mirror(0x07f8).w(FUNC(galaxian_state::irq_enable_w));
	map(0xb004, 0xb004).mirror(0x07f8).w(FUNC(galaxian_state::galaxian_stars_enable_w));
	map(0xb006, 0xb006).mirror(0x07f8).w(FUNC(galaxian_state::galaxian_flip_screen_x_w));
	map(0xb007, 0xb007).mirror(0x07f8).w(FUNC(galaxian_state::galaxian_flip_screen_y_w));
	map(0xb800, 0xb800).mirror(0x07ff).r("watchdog", FUNC(watchdog_timer_device::reset_r));

    -- overritten by bongo:
    map(0x0000, 0x5fff).rom().region("maincpu", 0); // extend ROM
	map(0xb000, 0xb000).mirror(0x7f8).nopw(); // interrupt enable moved
	map(0xb001, 0xb001).mirror(0x7f8).w(FUNC(galaxian_state::irq_enable_w));
	map(0xb800, 0xb800).mirror(0x7ff).nopw(); // written once at start


    ----

    Secret track? No! I think it's in there.... best track though
    
    woah, secret track: 0x0b sfx (set 0x8042/3/4...) wow. crazy.
    0x10 is hilarious... but think it's just playing game code as sfx.

    ---

** Interesting AABB algo

   1. subs positions and widht, checks carry.
    2. if no hit -might be to the left so ADDS double width... if carry, hit on other side

    > enemy x = 0, player x = 12 = NO HIT
    > enemy x = 12, player x = 0 = YEP HIT!

  #+BEGIN_SRC
        00 (eX)        00            x88
    .-  12 (pX)    .-   8          - x94
     = -12          = - 8          -  6
    .-  12 (w/2)   .-  12          - xa
     = -24          = -20          - 22
     C?  N          C?  N          N
    .+  24 (w*2)   .+  24          + 33
     =   0          =   4          = 11
     C?  N              Y          = Y
    
    
  #+END_SRC

  for dino, much bigger collision area:
  x: sub $18, add $30
  y: sub $28, add $50


  ----
** level data layout

  https://www.youtube.com/shorts/tD6xj4vwGZ0

      ;; Level BG data is FF separated, then split on 00.
    ;; Each row is a column of the screen, starting at col 6
    ;; first byte of segment is the row #

    eg:
18B0: 03 41 00 09 FE 00 1E 39 FF
18B9: 03 43 00 09 FD 45 41 00 1B FE 3B 45 45 FF
18C7: 03 40 00 09 FD 42 00 1B FD 3F 3F 3B FF
18D4: 03 43 00 09 FC 41 00 1B FD 3B 3B 3F FF

Hadn't notices all levels have same first 6 columns!

--------------
** level design

actually pretty good!
intro the level, no danger - just jump,
enxt is exactly the same, but with one rock,
then new level, etc
A 7 "types" of level - progressively more difficult
intro S quite late - very exciting
awesome cut scene... but weirdly, no bonus.
---
33 pickups: 5 full sets of bonuses, max bonus = 10 + 20 + 30 + 40 + 40 = 140k
~60k for screens, + 140k for bonus  = ~200k max for one round.

level 8 and 13 are the same level (different pickup!)

ledge on blue meaninies - important later

levels lead up and down consistently: pro tip, careful getting bonuses at the bottom - forget to look up at the birds on the next level.

No bonus for catching dino. how cool is that? Also, dino screen is lowest point scoring: no bonuses to pickup, can't get full move bonus

First 6 columns of every screen is the same.

----
sneaky timing - easy to learn, hard (impossible?) to master... it's own handrolled collision - distinct feel, infuriating, but learnable and then you always blame yourself. - you can't play on autopilot: need to be in the zone and concentrating

3s and 6s... plus offset by 1
inc
inc
inc

Every level encourages running out of the game - except for the two-birds-opposite-directions: that punishes it.

Stairs are juuuust too narrow - so can't hold down jump right: changes completely on second round.

the flow of the levels is really great. Ups and downs match (barring skipping with bonus, which messes you up sometimes). And the way it transitions from the early screens to the later feels very well thought out. Each time you master a section, it stops showing up. The dastardly W with 3 birds is the icing. Then the dino catch is the icing on the icing. Then the cutscene is the chococlate on the icing on the icing.

** Level types

7 types of level
#+BEGIN_SRC

_m_,  _-`-_, _/`,`w`, `\_, _S`, _≡ ≡`, _S-

n_n, nTn, /,W, \, S, S_S,
n_n, nTn, /,^^,\, S, Sc

01: n_n  | crown right
02: n_n  rock right | cross right
03: nTn  | cross right
04: n_n  bird bottom, rock right | crown right
05: /    | crown center
06: W    | crown center
(bonuses: 6)
07: \    | cross center
08: n_n  bird bottom, rock left, rock right | cross right
09: nTn  rock right | cross right
10: /    bluey center | crown center
11: W    bird top, | crown center, ring right
(bonuses: 6)
12: \    blue center, blue center | cross center
13: n_n  bird bottom, rock left, rock right | crown right (same pattern as 8)
14: nTn  rock left, rock right | ring left, cross right
15: n_n  ltr bird bottom, bird right | cross right
16: S    | ring bottom center, vase top left
(bonuses: 7)
17: \    ltr bird center, bluey center, bluey center | cross center
18: n_n  ltr bird bottom, bird bottom, rock right | cross right
19: S    arrow center, arrow top | ring bottom, vase top right
20: \     arrow center, arrow top, bluey center | cross center
21: S_S  | crown bottom, ... cross center, vase top
(bonuses: 8)
22: W    bird top, ltr bird top | crown center, ring right
23: \    bird bottom, ltr bird center, bluey center | cross center
24: S_S  flame (x3) center | crown bottom, cross center, vase top
(bonuses: 6)
25: W    bird top, ltr bird top, ltr bird top | crown center, ring right
26: \    arrow top, arrow center, arrow bottom | cross center
27: S    bird top, ltr bird top, ltr bird top
(bonuses: 6)
#+END_SRC

** Pro tips:

Safety stair pickup (e) - go up stair past pickup, drop back down.
Fast rock leap (t) - in round 2, sneakily get pickup under rock, then back, thne jump over the rock as it falls
moving bonus:
-- Jump from ledge will get more bonus... not flat ground
-- Can wait on moving platform to get more points if will skip above
-- Can jump over bonus, go to end, come back for more points (if skip)
-- Extreme: on S, can jump out right side of screen and then come back to get some extra points

collision is left 12px - can overlap birds heading at you
bonus resets on round change - don't sweat end-level deaths
favour speed-run over careful: doesn't work in round 2
fast round - can jump from second-to-bottom stair

- what's that weird tiny "slowdown" right at the start? Lags for a split second
- maybe the "impossible 3 bird" run : might be beatable if you time it so the first pickup is your bonus, and skip the screen

- on S-with-arrow levels, after getting 1000 bonus, JUMP back down - much faster than running the gauntlet towards the arrow

--- advanced 
on highwire levels, pauses for a few frames before falling to platform

-- fast fall technique - hit edge of platform

- front-side the birds!
can make it IN FRONT of the highwire birds: only way to beat faster levels (eg, 3 bird level on 4, but requires very precise timing. I thought it was impossible, but did it! Need to find the new "impossible level".

Blue meanies: as dino gets faster - can't wait - have to jump over the first one.
This mean you miss the pickup: but it IS possible (not too hard) to jump back and get the pickup, then sneak under the second blue meanie. (works for round 4 - round 5 it can work but is much tricker: need to grab the pickup and then jump from the second-to-bottom platform... timing is harrrd. UPDATE: nope, not hard - you don't need to jump back very much... only slightly to get the pickup. So it's easy to grab it and flip around back down the stairs: probably safer than trying to jump the horizontal meanie.)

- extra points if you jump over the bonus on W and go to end, then come back - but very difficult to not pickup the pikup, and difficult not to trigger next level

Dino cage
1. Wait until dino goes up to middle platform, then go in front of two birds. Wait until front bird is close then spring.
2. Wait until birds pass, jump up then jump OVER the first bird (in between the birds). Run along with the birds and jump just as it's safe to not hit your head on the top bird.
   ... up to at least round 5 is possible. Need to write them down to memorise:
3.
4.
5.

---

if you realise you've jumped too early, keep playing like you're going to stick the landing. Sometimes you do, and the mostly likely thing to do is instantly die if you try to compensate.

---


tas:1.25M!  https://tasvideos.org/6443S

** Bug fixes
-- bugfix: draws inner border on YOUR BEING CHASED screen
poke_rom(0x56da,0x5c)
-- bugfix: the pointy stair-down platform
poke_rom(0x1f01,0xfc)
-- subjective typography fix: align 1000 bonus better
poke_rom(0x162d,0x0f)
-- bugfix: don't jump to wrong byte in hiscore something.
-- no visual changes, but hey.
poke_rom(0x3120,0x17)
-- bugfix: in attract screen, jumping up stairs the player's
-- head and legs are flipped for one frame of animation. Fix it!
poke_rom(0x5390,{0x93,0x94}) -- on the way up
poke_rom(0x5418,{0x13,0x14}) -- on the way down (lol, both ways)
-- subjective bugfix: add inner border to empty attract screen
poke_rom(0x48C7, {
   0xCD,0xD0,0x56, -- call DRAW_BUGGY_BORDER
   0xCD,0xA8,0x5a, -- call original FLASH_BORDER
   0xC9
})

Bongo Tree! Lol... it's meant to be like that, not a bug?!

TODO: what is that lag at the start?!

** Trav bug

trav bug: die on screen one/two
always 1/2 - some others, but can't do it consistently

! You can see similar beviour if you hit your head on a tile then fall down - it "stutters" downwards

Never called after transition (until death):

_ON_GROUND
09F7: AF          xor  a        ; reset
09F8: 32 11 80    ld   ($FALLING_TIMER),a

wp 800F,1,w,,{ printf "Read @ %08X\n",wpaddr ; g }
wpset 800F,1,w,,{ printf "w@%04X : %02X",wpaddr,wpdata ; g }

Frame:
07->0 into next frame
00
07->0 jump ok

07->0 into next frame
00
07->4 ded ?

---
Weird sequencing of frames and timer. Is one on interrupt?

w@8011 : 00
w@8011 : 00
w@800F : 07 <- jump
w@800F : 06
w@800F : 05
w@800F : 04
w@800F : 03
w@800F : 02
w@800F : 01
w@800F : 00
w@8011 : 10 <- fall timer set (in second screen?)
w@800F : 00
w@800F : 07
w@8011 : 0F
w@8011 : 0E
w@800F : 06
w@8011 : 0D
w@8011 : 0C
w@8011 : 0B
w@8011 : 0A
w@8011 : 09
w@8011 : 08
w@800F : 05
w@8011 : 07
w@8011 : 06
w@8011 : 05
w@8011 : 04
w@8011 : 03
w@8011 : 02
w@800F : 04
w@8011 : 01
w@8011 : 00 <- fall timer expire (0xa40). ded.
Stopped at breakpoint 1

reads "jump up" phys ($960)



 PLAYER_Y
w@8143 : B8 <- on platform sc1
w@8143 : AC <- jump
w@8143 : A0
w@8143 : 9A
w@8143 : 9A
w@8143 : A0
w@8143 : AC
w@8143 : B8 <- 7 ticks
w@8143 : D0 <- ground level
w@8143 : 00 <- reset
w@8143 : D0 
w@8143 : D2 <- into ground (normal, but why? SNAP_Y_TO_8 should fix it?)
w@8143 : D4 <- +2? things go bad here. Should be D0 again
w@8143 : C8 <- jumping (jumps 0C, but should be C4 here)
w@8143 : CA ; +2?
w@8143 : CC ; +2?
w@8143 : CE ; +2?
w@8143 : D0 <- snap back to ground
w@8143 : D2 <- into ground
w@8143 : D4
w@8143 : C8  <- jumps up 0C
w@8143 : CA ; +2
w@8143 : CC
w@8143 : CE 
w@8143 : D0 <- snap back to ground
w@8143 : D2 <- into ground
w@8143 : D4
w@8143 : CE <- jumping
w@8143 : D0 <- snap back to ground
w@8143 : D3 <- odd number! (into ground)
w@8143 : D6
w@8143 : D9
w@8143 : E9 <- ded (by timer)
User-initiated break



non dead one (holding jump):
w@8143 : B8 <- platform sc2
w@8143 : AC <- jump
w@8143 : A0
w@8143 : 9A
w@8143 : 9A
w@8143 : A0
w@8143 : AC
w@8143 : B8 <- 7 ticks
w@8143 : D0 <- reset to ground
w@8143 : 00 <- screen transition
w@8143 : D0 
w@8143 : D2 <- in ground
w@8143 : D0
w@8143 : C4 <- normal jump (D0-C4=0C: first entry in phys table)
w@8143 : B8
w@8143 : B2
w@8143 : B2
w@8143 : B8
w@8143 : C4
w@8143 : D0
w@8143 : D0




normal one (not holiding jump)
w@8143 : B8 <- on platform scr1
w@8143 : AC <- jump
w@8143 : A0
w@8143 : 9A
w@8143 : 9A
w@8143 : A0
w@8143 : AC
w@8143 : B8 <- 7 ticks
w@8143 : D0 <- ground
w@8143 : 00
w@8143 : D0
w@8143 : D2 <- into ground (ok)
w@8143 : D0 <- back to ground
w@8143 : D0

---


8143 = player Y
800f = jump table index
8011 = falling timer

Fail to die (held jump, but didn't glitch)
w@8143 : B8 <- platform scr 1
w@800F : 07 <- jump
w@800F : 06
w@8143 : AC
w@800F : 05
w@8143 : A0
w@800F : 04
w@8143 : 9A
w@800F : 03
w@8143 : 9A
w@800F : 02
w@8143 : A0
w@800F : 01
w@8143 : AC
w@800F : 00
w@8143 : B8 <- back to init Y
w@8011 : 10 <- fall timer set
w@8143 : D0 <- Y to new ground
w@8143 : 00 <- screen reset
w@8143 : D0 <- y pos ground
w@800F : 00 <- jump idx is 0
; no jump triggered in this "good" version
w@8011 : 0F <- fall timer - 1
w@8143 : D2
w@8011 : 00 <- reset fall timer 
w@8143 : D0
w@8011 : 00 <- reset fall timer 
w@8143 : D0
w@800F : 07 <- Jump triggered
w@800F : 06 <- phys
w@8143 : C4
w@800F : 05 <- phys
w@8143 : B8
w@800F : 04 <- phys
w@8143 : B2
w@800F : 03 <- phys
w@800F : 04 <- phys what?!
w@8143 : B2
w@800F : 03 <- phys
w@8143 : B2
w@800F : 02 <- phys
w@8143 : B8
w@800F : 01 <- phys
w@8143 : C4
w@800F : 00<- phys done
w@8143 : D0
w@8011 : 00 <- reset fall timer


---
ok, looks like bug is jump triggerered whne 8011 fall timer is not 0

and ded
w@8143 : B8 <- platform scr 1
w@800F : 07 <- jump
w@800F : 06
w@8143 : AC
w@800F : 05
w@8143 : A0
w@800F : 04
w@8143 : 9A
w@800F : 03
w@8143 : 9A
w@800F : 02
w@8143 : A0
w@800F : 01
w@8143 : AC
w@800F : 00
w@8143 : B8 <- back to init Y
w@8011 : 10 <- fall timer set
w@8143 : D0 <- Y to new ground
w@8143 : 00 <- screen reset
w@8143 : D0 <- Y pos gound
w@800F : 00
w@800F : 07 <- JUMP TRIGGERED!
w@8011 : 0F <- fall timer - 1
w@8143 : D2
w@8011 : 0E <- oh noes, not reset - because (jump_idx & 0xc) > 0
w@8143 : D4 <- +2 from JUMP_UPWARD_CHECK_BIG_FALL
w@800F : 06
w@8143 : C8 <- now some phys, -12 (0xf4) from table idx 6
w@8011 : 0D
w@8143 : CA <- but oh, +2 again
w@8011 : 0C
w@8143 : CC <- +2
w@8011 : 0B
w@8143 : CE <- +2
w@8011 : 0A
w@8143 : D0 <- +2
w@8011 : 09
w@8143 : D2 <- +2
w@8011 : 08
w@8143 : D4 <- +2
w@800F : 05 <- phys tick
w@8143 : C8 <- -12 (0xf4) from table idx 5
w@8011 : 07
w@8143 : CA
w@8011 : 06
w@8143 : CC
w@8011 : 05
w@8143 : CE
w@8011 : 04
w@8143 : D0
w@8011 : 03
w@8143 : D2
w@8011 : 02
w@8143 : D4
w@800F : 04 <- phys tick
w@8143 : CE <- -6 (0xfa) from table idx 4
w@8011 : 01
w@8143 : D0
w@8011 : 00
w@8143 : D3
w@8143 : D6
w@8143 : D9
w@8143 : E9
User-initiated break

***  theories
Bug seems to be that falling_timer is not reset on screen transition.
But to be an issue, a JUMP_TRIGGERED has to happen before GROUND_CHECK clears the falling_timer.

Maybe NMI sets CONTROLN slightly earlier on level 2 for some reason? Then jump is set BEFORE check ground... otherwise check ground resets the falling_timer before jump sets jump_tbl_idx/

Or, if not NMI issue: it's DO_JUMP_PHYSICS: only runs once every 6 frames (in round 1, then 4 after that)... this triggers jump. Seems right, 1-in-6 chance to trigger: Buuut, why does it run EVERY TIME in screen 2?

Why the inconsistency? Always triggers on level 1->2, but more random on other screens. Should be random everywhere?

* lore
   ;; - We decided "Bongo" is actually name of the lil' jumpy
    ;;   guy in the corner of the screen, not the player.
    ;;   He's complicated: celebrates the player's death,
    ;;   but also parties with player on dino capture.

    what are those lil' bongolians at the dance party?

    is the player Australian? Spanish? Wearing high-heels? Indiana Jones (Raiders was 1981).
    Bongo is ewok-ish - RotJ was also 1983... could they have known about ewoks?
Age? boy or man?
    

* TG
https://www.twingalaxies.com/wiki_index.php?title=Policy:Official-MAME-Platform-Submission-Rules-and-Guidelines

- frameskip set to 0 and "draw all frames"
- must show dip settings before and after.

  - aspect ration is 224x768 - but this is some internal ratio (from Galaxian).
    to get it to save at native:
 mame bongo -snapsize 224x256
 - f12 snapshot.
   shft-f12 record mni?
   ctrl-shift-f12 record avi
   records to /snap

 record inp file:
 mame bongo -record bongorecord
 records to /inp
playback inp:
mame bongo -playback bongorecor
 
 
-nvram_directory NUL

 You can use -wavwrite to record audio in WAV format.

You can use -mngwrite to record video in MNG format.

You can use -aviwrite to record audio and video in uncompressed AVI format. 


-iv 1 on playback lets you "Del" to see dips and speed up playback?

---

 ./mame bongo -playback 2023-04-16-370190 -aviwrite bongovid.avi -snapsize 224x256 -exit_after_playback


0.263W (mame0263-706-g35e85bbfe63)%


----------
Submitters should use MAME version 183 or higher, preferably 183 or 220.

Submitters should name their inp and zip file in the following manner:

xxx_yyy_score_zzz

Example:

elf_bosco_588800_w183.inp inp
elf_bosco_588800_w183 zip file
so name the inp the same as the zip

xxx your initials
yyy rom name
zzz version of wolfmame
_separator 

* More notes

Well, I spent a bunch of time on the weekend reverse engineering bongo source code. (I reckon I'd be world champion now if I had have just played the game!) 
https://github.com/mrspeaker/bongotrain/blob/main/bongo.asm
 
I'm going through and commenting the source, and replacing memory addresses with labels. Haven't found too much interesting stuff yet, but a couple of things:
 
Pickup tile collision: has to be 4 pixels from the left of the player and 24px down to trigger collision. That's why it's so hard to pick up the bonus when it's on a ledge.
 
Also, bonuses are capped at 40k for sure.
 
Here's the pickup lookup table for each screen (up to 3 pickups per screen maximum): so, easy to modify for a level editor.

--- TIME SPEED RUN
And I found this funny thing: there was meant to be a timer that showed under the score - but it was removed by returning from the draw function. Damn it, we could have had speed-runner mode too! In my improved lua script, I removed the return instruction so now it draws the time:

Looks like it was half-baked: on transition, flashes white for a couple of frames. Disappears on the end screen (where you'd want to compare it to other runs), and doesn't show at all on the hiscore entry or display.

----

I also figured out you get more points if you jump off a ledge before the end of a screen. Like, if you walk off the end of screen 1, you get 2090 points, but if you jump off the ledge you get 2210 points. I was always jumping just to show-boat, but turns out it's optimal strategy

Yeah, I watched BAZZA (BARRA? BAGGA?)'s run - they jump EVERY screen end (but it's not necessary unless there's an ledge... pffft, amateur)
---
Mini-tip: in the "jump up the stairs" level - you know it's hard to get the crown (you have to carefully tap until you get it)? Now I just go to the next stair up, and then drop back down. Bit less stressfull, and even works when the blue meanie guy is there.

I played about 4 times around - it looks like it's "impossible" on about the 4th time where there is the "1 bird left/2 birds right" level. You can't wait for the bird, because the dino is too quick. It might be possible to be frame-perfect and jump between the two birds... but damn, I couldn't do it.

The only thing that seems to change is how long the dino takes to start

It does change things though - some levels you just have to go... like the blue meanies - you need to jump over the first one! That's why you can sit next to him.

Can jump from one-step-higher in second round

-- hand ro

-----
    ;; Oooh, mystery function - commented out.
    ;; Think it was going to place Bongo on the
    ;; bottom right for levels where player is
    ;; up top.
MOVE_BONGO_REDACTED
0D40: C9          ret           ; just rets.
0D41: 3A 48 81    ld   a,($BONGO_X)
0D44: 67          ld   h,a
0D45: 32 4B 81    ld   ($BONGO_Y),a
0D48: C6 10       add  a,$10


---
UPDATE_FALLING_ROCKS
1680: 3A 04 80    ld   a,($PLAYER_NUM)

round 1 vs round 2+

----
HOw the speeds work:

SPEED_UP_FOR_NEXT_ROUND
4EE0: 3A 04 80    ld   a,($PLAYER_NUM)
4EE3: A7          and  a
4EE4: 20 05       jr   nz,$4EEB
4EE6: 21 5B 80    ld   hl,$SPEED_DELAY_P1
4EE9: 18 03       jr   $4EEE
4EEB: 21 5C 80    ld   hl,$SPEED_DELAY_P2
4EEE: 7E          ld   a,(hl)
4EEF: FE 1F       cp   $ROUND1_SPEED
4EF1: 20 03       jr   nz,$4EF6
4EF3: 36 10       ld   (hl),$ROUND2_SPEED ; round 2 = $10
4EF5: C9          ret
4EF6: FE 10       cp   $ROUND2_SPEED
4EF8: 20 03       jr   nz,$4EFD
4EFA: 36 0D       ld   (hl),$ROUND3_SPEED ; round 3 = $0d
4EFC: C9          ret
4EFD: C3 1C 50    jp   $501C    ; round 4+ = get 2 faster each time!
501C: 3D          dec  a
501D: 3D          dec  a
501E: 77          ld   (hl),a

----------

cool to see them tinkering with game design stuff

    ;; ANOTHER commented out one!
    ;; This stops a player jumping up through a platform
    ;; from underneath it. Probably more realistic, but
    ;; smart move on the devs part to remove it it - it sucks!
PREVENT_CLOUD_JUMP_REDACTED
1290: C9          ret
1291: 3A 47 81    ld   a,($PLAYER_Y_LEGS)

----


mini "bug" 8011 "falling timer' continues over to next screen - but you're on the ground, so next frame it resets. But, I reckon if you could time your fall so you got out of the screen when teh timer was 1, you'd die on the first frame of the next screen...


    
---    ;; My theory: the bonus-points text that appears
    ;; when you get a pickup, was supposed to disappear after 64 frames
    ;; but they gave up. That's my theory.


    
    
* hw

- 0.188: Map Bongo jump as a button and not as up direction [Angelo Salese].

-------------------
ROM_START( bongo )
	ROM_REGION( 0x6000, "maincpu", 0 )
	ROM_LOAD( "bg1.bin",    0x0000, 0x1000, CRC(de9a8ec6) SHA1(b5ee99b26d1a39e31b643ad0f5723ee8e364023e) )
	ROM_LOAD( "bg2.bin",    0x1000, 0x1000, CRC(a19da662) SHA1(a2674392d489c5e5eeb9abc51572a37cc6045220) )
	ROM_LOAD( "bg3.bin",    0x2000, 0x1000, CRC(9f6f2150) SHA1(26a1f872686ddddcdb690d7b826ba26c20cdec35) )
	ROM_LOAD( "bg4.bin",    0x3000, 0x1000, CRC(f80372d2) SHA1(078e2c8b947103c168c0c85430f8ebc9d09f8ba7) )
	ROM_LOAD( "bg5.bin",    0x4000, 0x1000, CRC(fc92eade) SHA1(f4012a1c4631388a3e8109a8381bc4084ddc8757) )
	ROM_LOAD( "bg6.bin",    0x5000, 0x1000, CRC(561d9e5d) SHA1(68d7fab3cfb5b3360fe8064c70bf21bb1341032f) )

	ROM_REGION( 0x2000, "gfx1", 0 )
	ROM_LOAD( "b-h.bin",    0x0000, 0x1000, CRC(fc79d103) SHA1(dac1152221ebdc4cd9bf353b4cc5d45021ca5d9e) )
	ROM_LOAD( "b-k.bin",    0x1000, 0x1000, CRC(94d17bf3) SHA1(2a70968249946de52c5a4cfabafbbf4ecda844a8) )

	ROM_REGION( 0x0020, "proms", 0 )
	ROM_LOAD( "b-clr.bin",  0x0000, 0x0020, CRC(c4761ada) SHA1(067d12b2d3635ffa6337ed234ba42717447bea00) )
ROM_END

----
** Rom hack

If you are hacking and changing ROM contents a lot, it's a pain to keep updating the hashes. Instead of specifying the CRC() and SHA1(), you can use NO_DUMP:
    ROM_LOAD( "robotron.sbc", 0x0f000, 0x1000, NO_DUMP )
When you start MAME, it will give a warning, but if you type OK, you can proceed.

MAME

The built-in debugger in MAME makes it an excellent tool when hacking video games. I use it all the time on code changes for the Williams games. It's easier to debug code under MAME before burning EPROMs for the real game.

One issue is that the latest version of MAME will not allow you to run a patched ROM image - you get an error message that a file is missing. You can fix this by compiling MAME yourself and patching the hashes for the files you edit. The file src\mame\drivers\williams.c has a line for each ROM file for each game:

ROM_LOAD( "robotron.sba", 0x0d000, 0x1000, CRC(13797024) SHA1(d426a50e75dabe936de643c83a548da5e399331c) )

This tells the file name to load, where to put it in memory, how big it is, and what the CRC and SHA1 hashes of the file are. It is these hashes that are used to verify the ROM images. If they are incorrect, the game won't run, so you have to patch the hashes after modifying the ROM images.

This page gives the CRC and SHA1 for any file.

For instance, for the Robotron shot-in-the-corner bug fix, you need to patch 2 files and modify the code to the following:
ROM_LOAD( "robotron.sbb", 0x0e000, 0x1000, CRC(e83a2eda) SHA1(4A62FCD2F91DFB609C3D2C300BD9E6CB60EDF52E) )
ROM_LOAD( "robotron.sb5", 0x14000, 0x1000, CRC(827cb5c9) SHA1(1732D16CD88E0662F1CFFCE1AEDA5C8AA8C31338) )

If you don't want to do the work to compile MAME (it's not that hard), you can hex-edit the executable file mame.exe, search for the lines, and modify them.

If you are hacking and changing ROM contents a lot, it's a pain to keep updating the hashes. Instead of specifying the CRC() and SHA1(), you can use NO_DUMP:
ROM_LOAD( "robotron.sbc", 0x0f000, 0x1000, NO_DUMP )

When you start MAME, it will give a warning, but if you type OK, you can proceed.

---

// Larger romspace, interrupt enable moved
GAME( 198?, thepitm,     thepit,   thepitm,    thepitm,    galaxian_state, init_mooncrsu,   ROT90,  "bootleg (KZH)", "The Pit (bootleg on Moon Quasar hardware)", MACHINE_SUPPORTS_SAVE ) // on an original MQ-2FJ PCB, even if the memory map appears closer to Moon Cresta
GAME( 1983, bongo,       0,        bongo,      bongo,      galaxian_state, init_kong,       ROT90,  "Jetsoft",       "Bongo", MACHINE_SUPPORTS_SAVE )

    static INPUT_PORTS_START( bongo )
	PORT_START("IN0")
	PORT_BIT( 0x01, IP_ACTIVE_HIGH, IPT_COIN1 )
	PORT_BIT( 0x02, IP_ACTIVE_HIGH, IPT_UNKNOWN )           // see notes
	PORT_BIT( 0x04, IP_ACTIVE_HIGH, IPT_JOYSTICK_LEFT ) PORT_2WAY
	PORT_BIT( 0x08, IP_ACTIVE_HIGH, IPT_JOYSTICK_RIGHT ) PORT_2WAY
	PORT_BIT( 0x10, IP_ACTIVE_HIGH, IPT_UNUSED )            // see notes
	PORT_BIT( 0x20, IP_ACTIVE_HIGH, IPT_BUTTON1 )
	PORT_BIT( 0x40, IP_ACTIVE_HIGH, IPT_UNUSED )            // see notes
	PORT_BIT( 0x80, IP_ACTIVE_HIGH, IPT_UNUSED )            // see notes

	PORT_START("IN1")
	PORT_BIT( 0x01, IP_ACTIVE_HIGH, IPT_START1 )
	PORT_BIT( 0x02, IP_ACTIVE_HIGH, IPT_START2 )
	PORT_BIT( 0x04, IP_ACTIVE_HIGH, IPT_JOYSTICK_LEFT ) PORT_2WAY PORT_COCKTAIL
	PORT_BIT( 0x08, IP_ACTIVE_HIGH, IPT_JOYSTICK_RIGHT ) PORT_2WAY PORT_COCKTAIL
	PORT_BIT( 0x10, IP_ACTIVE_HIGH, IPT_UNUSED )            // see notes
	PORT_BIT( 0x20, IP_ACTIVE_HIGH, IPT_BUTTON1 ) PORT_COCKTAIL
	PORT_BIT( 0x40, IP_ACTIVE_HIGH, IPT_UNUSED )
	PORT_BIT( 0x80, IP_ACTIVE_HIGH, IPT_UNUSED )

	PORT_START("IN2")
	PORT_BIT( 0xff, IP_ACTIVE_HIGH, IPT_UNUSED )            // see notes

	PORT_START("DSW")
	PORT_DIPUNUSED( 0x01, IP_ACTIVE_HIGH )
	PORT_DIPNAME( 0x06, 0x02, DEF_STR( Lives ) )
	PORT_DIPSETTING(    0x00, "2" )
	PORT_DIPSETTING(    0x02, "3" )
	PORT_DIPSETTING(    0x04, "4" )
	PORT_DIPSETTING(    0x06, "5" )
	PORT_DIPNAME( 0x08, 0x00, "Infinite Lives (Cheat)" )    // always gives 3 lives
	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
	PORT_DIPSETTING(    0x08, DEF_STR( On ) )
	PORT_DIPUNUSED( 0x10, IP_ACTIVE_HIGH )
	PORT_DIPUNUSED( 0x20, IP_ACTIVE_HIGH )
	PORT_DIPNAME( 0x40, 0x40, DEF_STR( Coinage ) )
	PORT_DIPSETTING(    0x00, DEF_STR( 2C_1C ) )            // also 1C_3C for Coin B if it existed
	PORT_DIPSETTING(    0x40, DEF_STR( 1C_1C ) )            // also 1C_6C for Coin B if it existed
	PORT_DIPNAME( 0x80, 0x00, DEF_STR( Cabinet ) )
	PORT_DIPSETTING(    0x00, DEF_STR( Upright ) )
	PORT_DIPSETTING(    0x80, DEF_STR( Cocktail ) )
INPUT_PORTS_END


void galaxian_state::bongo(machine_config &config)
{
	galaxian_base(config);

	// alternate memory map
	m_maincpu->set_addrmap(AS_PROGRAM, &galaxian_state::bongo_map);
	m_maincpu->set_addrmap(AS_IO, &galaxian_state::bongo_io_map);

	// sound hardware
	AY8910(config, m_ay8910[0], GALAXIAN_PIXEL_CLOCK/3/4);
	m_ay8910[0]->port_a_read_callback().set_ioport("DSW");
	m_ay8910[0]->add_route(ALL_OUTPUTS, "speaker", 0.5);
}

void galaxian_state::galaxian_base(machine_config &config)
{
	// basic machine hardware
	Z80(config, m_maincpu, GALAXIAN_PIXEL_CLOCK/3/2);
	m_maincpu->set_addrmap(AS_PROGRAM, &galaxian_state::galaxian_map);

	WATCHDOG_TIMER(config, "watchdog").set_vblank_count("screen", 8);

	// video hardware
	GFXDECODE(config, m_gfxdecode, m_palette, gfx_galaxian);
	PALETTE(config, m_palette, FUNC(galaxian_state::galaxian_palette), 32);

	SCREEN(config, m_screen, SCREEN_TYPE_RASTER);
	m_screen->set_raw(GALAXIAN_PIXEL_CLOCK, GALAXIAN_HTOTAL, GALAXIAN_HBEND, GALAXIAN_HBSTART, GALAXIAN_VTOTAL, GALAXIAN_VBEND, GALAXIAN_VBSTART);
	m_screen->set_screen_update(FUNC(galaxian_state::screen_update_galaxian));
	m_screen->screen_vblank().set(FUNC(galaxian_state::vblank_interrupt_w));

	// sound hardware
	SPEAKER(config, "speaker").front_center();
}


void galaxian_state::bongo_map(address_map &map)
{
	mooncrst_map_base(map); // no discrete sound
	map(0x0000, 0x5fff).rom().region("maincpu", 0); // extend ROM
	map(0xb000, 0xb000).mirror(0x7f8).nopw(); // interrupt enable moved
	map(0xb001, 0xb001).mirror(0x7f8).w(FUNC(galaxian_state::irq_enable_w));
	map(0xb800, 0xb800).mirror(0x7ff).nopw(); // written once at start
}

void galaxian_state::bongo_io_map(address_map &map)
{
	map.global_mask(0xff);
	map(0x00, 0x01).w(m_ay8910[0], FUNC(ay8910_device::address_data_w));
	map(0x02, 0x02).r(m_ay8910[0], FUNC(ay8910_device::data_r));
}


void galaxian_state::mooncrst_map_base(address_map &map)
{
	map.unmap_value_high();
	map(0x0000, 0x3fff).rom();
	map(0x8000, 0x83ff).mirror(0x0400).ram();
	map(0x9000, 0x93ff).mirror(0x0400).ram().w(FUNC(galaxian_state::galaxian_videoram_w)).share("videoram");
	map(0x9800, 0x98ff).mirror(0x0700).ram().w(FUNC(galaxian_state::galaxian_objram_w)).share("spriteram");
	map(0xa000, 0xa000).mirror(0x07ff).portr("IN0");
	map(0xa800, 0xa800).mirror(0x07ff).portr("IN1");
	map(0xb000, 0xb000).mirror(0x07ff).portr("IN2");
	map(0xb000, 0xb000).mirror(0x07f8).w(FUNC(galaxian_state::irq_enable_w));
	map(0xb004, 0xb004).mirror(0x07f8).w(FUNC(galaxian_state::galaxian_stars_enable_w));
	map(0xb006, 0xb006).mirror(0x07f8).w(FUNC(galaxian_state::galaxian_flip_screen_x_w));
	map(0xb007, 0xb007).mirror(0x07f8).w(FUNC(galaxian_state::galaxian_flip_screen_y_w));
	map(0xb800, 0xb800).mirror(0x07ff).r("watchdog", FUNC(watchdog_timer_device::reset_r));
}


'bongo'

  - IN0 bit 1 is supposed to be COIN2 (see coinage routine at 0x0288), but
    there is a test on it at 0x0082 (in NMI routine) which jumps to 0xc003
    (unmapped memory) if it pressed (HIGH).
  - IN0 bit 7 is tested on startup (code at 0x0048) in combination with bits 0 and 1
    (which are supposed to be COIN1 and COIN2). If all of them are pressed (HIGH),
    the game displays a "CREDIT FAULT" message then jumps back to 0x0048.
  - IN0 bit 4 and IN1 bit 4 should have been IPT_JOYSTICK_DOWN (Upright and Cocktail)
    but their status is discarded with 3 'NOP' instructions at 0x06ca.
  - IN0 bit 7 and IN0 bit 6 should have been IPT_BUTTON1 (Upright and Cocktail)
    but their status is discarded with 3 'NOP' instructions at 0x06d1.
  - IN2 is read via code at 0x2426, but its contents is directly overwritten
    with value read from DSW (AY port A) via code at 0x3647.
    
* jetsoft

c64:

ad: BMX Stunts, Cavelon II, Quari (bongo port). JetSoft the arcade people. 061-775 0333
Sprite and character editor: https://ia903202.us.archive.org/31/items/Computer_Gamer_Issue_01_1985-04_Argus_Press_GB/Computer_Gamer_Issue_01_1985-04_Argus_Press_GB.pdf
RESET SWITCH (c64) - plugs into disc port  - instantly resets. "You need never loose a program again"

Cavelon arcade game has exact same hiscore screen as bongo

(wassis? https://uk.linkedin.com/in/john-hutchinson-b6898a23)


"Was actually known as "Hopto" under the Mastertronic label,"
"Hey, the game I had in TuttoComputer/games 3 with the name "Bongo"!"

Real hardware: https://www.ukvac.com/forum/threads/bongo-by-jetsoft.9681/

Fan art: https://cohost.org/rc/tagged/Bongo%20(Jetsoft)

"'The Codemasters story actually begins in the early Eighties with Richard and David Darling. Fascinated with computers from an early age, they fell in love with coding and were soon making games, first for Mirrorsoft and Jetsoft and then for budget Kings Mastertronic. '"
https://archive.org/details/retrogamerukbonus/Retro%20009%20%5B%21%5D/page/150/mode/2up?q=jetsoft

Jetsoft were based in Manchester, or Leeds, depending on which advert you look at (see Your Computer, Dec '84 and Computer Gamer, April '85).

- dudes talking bongo: https://retrogamingdailyshow.libsyn.com/285-arcade-hidden-gems-volume-4
  "there is a charm in it's wonky...." "the guy is camper than..." "I fell in love with this game..."
"so much charm"  "on the face of it it should be simple, but because the controls are so janky..." "you just come back for more"
  - competion to win arcade: https://ia903202.us.archive.org/31/items/Computer_Gamer_Issue_01_1985-04_Argus_Press_GB/Computer_Gamer_Issue_01_1985-04_Argus_Press_GB.pdf pg 25


**  John
- I used mame debugger to step throguht... how did you figure it out back then?
- did you play the games? design the gameplay? How did you know what would work?
  
*** what was the process to make a game from existing hardware?
- case of ripping out the roms and doing your own thing? What if you needed different hw/ram/audio etc?
  
*** symbols/labels off
written by hand?!
*** how were gfx designed? On graph paper?
*** weird jump table
JMP_HL_PLUS_4K:
push bc
ld   bc,$4000
add  hl,bc
pop  bc
jp   (hl)

  http://www.free-enterprise.co.uk/#
https://www.visit-watchet.co.uk/Members_Pages/FreeEnterprise/index.htm
  
  https://direct.mit.edu/books/oa-monograph/5459/Arcade-BritanniaA-Social-History-of-the-British
  https://segaretro.org/Sega_v_Richards
  https://www.omeek.co.uk/people/john-richards/c8a45b26b965cf4ef6aebf3f013a270e/
https://easychair.org/smart-program/DiGRA2023/2023-06-23.html


john hutchinson credited:
https://www.mobygames.com/person/1460954/john-hutchinson/
https://www.mobygames.com/game/72184/bongo/credits/arcade/

// found bmx stunts rom:
https://www.mameworld.info/ubbthreads/showthreaded.php?Cat=&Number=396318&page=0&view=expanded&sb=5&o=&fpart=1&vc=1
https://www.youtube.com/watch?app=desktop&v=0ZqunWXrV-w // bmx stunds

** YOUTUBE VIDEW!!!
https://www.youtube.com/watch?v=Rsy6yXQ9fAM
"got back to the lead developer: a man named John Huchinson"
https://uk.linkedin.com/in/john-hutchinson-b6898a23
https://github.com/zynmuse

"transition to next screen and turn into a Bongo tree for some reason" xD

"way more addicting that I ever expected".

Lava = "Well of souls". Bongo 50/50s.

bongoitis - can't pickup treasure. caues bongo has bad knees.

can jump the dino on S, fast level!

"favourite character: the floating 600" (platform scroll)

"bongo's got bad knees, so he can't survive that fall".

** Company
JETSOFT
GOLD STAR HOUSE,
198/200, Queenswood Drive,
Leeds LS6 3ND.
Tel. 0532 788758

says they are US but I think no... https://www.arcade-museum.com/Videogame/cavelon

long shot:
Me and Rav met Crazy John from Free Enterprise Games. Yes he's a massive hacker, did loads of the Galaxian hacks, he gave us a load of cabs,pcbs and other stuff and showed us the stuff he still had including some unreleased games. He gave us the flyer for a couple, I have them somewhere.
https://www.ukvac.com/forum/threads/arcade-manufacturers-in-the-uk.19228/#post-68330
(bongo is a galaxian hack)


--- John said:
Had a hewitt packard workstation - that could emulate the z80 (and others). 25000 pounds in th 80s! emulatore the processor. 5inch monitor that showed whole map of the memory. First things to figure out where the scores and the credits. Put a coin in, watch the screen and see what changed. It could break on memory access - so dump the previous 100 lines and figure out the coin routine. Start going from there - a fun challenge

Started to recognise routines - interrupt always at the same place.

Dump the rom then get it assembling. Start filling in all the labels.

25fps interupts to read the switches.

hardware was really similar... made their own boards that attached to the original to scrabmle the data and address lines -

macro assmebler: could use symbols. 

scramble board: not galazian probably.

stored in mem after vblank - when missiles got oto much, overwrot his code. give 50 credits and stuff.

----
Hello John,

I am trying to find out information about an arcade game called Bongo that was made by JetSoft in 1983. I was hoping to find out who the programmer was (or anything about it, really). 

There isn't much information about the company online, but while searching I stumbled over a post that said you knew a lot about Galaxian hacks: which I think Bongo is one.

As a longshot I thought I'd message you and see if you might know anything about it! No worries if not, and thank you for your time.

Earle
0000000000000

Hi
Back at a computer now not a phone, so can type more....

I vaguely remember the game but pretty sure I don't have the software for it.....but long ago so might just have!!!
I used to write the software for an awful lot Galaxian and similar conversions back then, know as "Competitive Video" up in Surbiton, Surrey.

As mentioned, feel free to call 0...32 any day from 11am until 9pm, or, if you are outside UK let me have your number as have a European 'phone as well.    Can probably help with most problems and information when i tax the old memory!

John R
Free Enterprise Games

00000000000000000000000000

"I payed Bongo in a generic cabinet in a pub in Falmouth UK in the early 1980s when I was 5 or 6. The colours were wrong; the blue and yellow palette that briefly appears during the attract sequence was used for the whole game. So perhaps that was a bootleg."
wtf? Falmouth UK? Falmouth Mass?! Also... theme 7!


** Nope, red herring Jetsoft
*** Falmouth
Official Gazette of the United States Patent and Trademark Office. Trademarks  1983-11-22: Vol 1036 Iss 4
https://archive.org/details/sim_official-gazette-us-patent-trademark-office-trademarks_1983-11-22_1036_4/page/424/mode/2up?q=jetsoft

SN 404,133 Jetsoft inc., East Falmouth. Mass. filed Nov. 29 1982.

JETIII: sn 404,129 JetSoft Inc
JETjr: SN 404,134

CAMS 1988
https://archive.org/details/21035CAMSxx88DesktopSyste/page/134/mode/2up?q=jetsoft
Jetsoft
170 Main Street
East Falmouth, MA 02536
(617) 548-6670

*** JETII
https://archive.org/details/bitsavers_datamation_54610682/page/n229/mode/2up?q=jetsoft
DEVELOPMENT SYSTEM

jetIII is an integrated computer aided appli¬ cations software development system and multi-user database. The package runs un¬ der most microcomputer operating sys¬ tems, including cp/m, ccp/m, mp/m, pc/dos, and ms/dos.

A menu-driven program generator enables programmers to write remarked and structured code. According to the vendor, it automatically generates code for many standard functions such as file mainte¬ nance, transaction processing, and report¬ ing. The software also offers an ability to accommodate relational, hierarchical, and network database structures and the facility to integrate applications software with the company’s BizWiz modules.

A report writer program is also in¬ cluded in the software. Designed to gener¬ ate a variety of reports and delimited files from the database, the report writer is menu-driven. Other functions include menu and forms creation capabilities, file maintenance, and system security. During 1984, spreadsheet, word processing, and graphics enhancements are scheduled.

Programs and packages developed with this software are operating system-independent and transportable to most micro¬ computers. jetIII is available for a single copy, six-user cost of $40,000. jetsoft inc.. East Falmouth, Mass.

*** other 
Jetsoft Corp: same jetsoft? https://archive.org/details/bub_gb_Xi8EAAAAMBAJ/page/n55/mode/2up?q=jetsoft
Screen Protector, Screen Guardian
Jetsoft Corp., 61 Crosby St., New York; (212) 966-9894

.... after 2000: "Paint It (JETSoft)" https://archive.org/details/supportinginform0000farm/page/78/mode/2up?q=jetsoft


Art-Copy 5.0: same? https://archive.org/details/HP-Professional_Vol._12_No._11_Nov_1998/page/44/mode/2up?q=jetsoft
Jetsoft Development Company Cincinnati, OH (800) 374-7401

Scanning software
https://archive.org/details/MacDirectory_Issue_9_Spring_2001/page/170/mode/2up?q=jetsoft
JETSOFT DEVELOPMENT, www.jetsoftdev.com 513/528-8668


oh no! Not the right Jetsoft?!

Senior Software Engineer. Jetsoft, Inc. 1982 - 1985 3 years. Falmouth, MA. 
        Employee number 3 of this start-up venture that provided database development tools for early micro-computer platforms. Involved in many aspects of the business, including sales support, staffing, and software development.

----------
Hello,
 
I'm not sure if I've reached the right person, but I've been trying to learn more about an old arcade game from 1983 called "Bongo". It was released by a company called JetSoft. 
 
I was wondering if it was the same company you were a part of, and if so - if you know who coded and designed the game? And if not, sorry to bother you!

reply: nope, sorry.
-------

